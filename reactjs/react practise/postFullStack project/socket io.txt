
// const io = new Server(httpServer);



// io.on("connection", (socket) => {
//   console.log("New client connected:", socket.id);

//   onlineUsers[socket.id] = true; // Add user to online list

//   socket.on("sendMessage", async (data) => {
//       const { from, to, message } = data;
//       try {
//           const fromUser = await User.findById(from).select('-password');
//           if (!fromUser) {
//               console.error('User not found');
//               return;
//           }

//           io.emit('receiveMessage', {
//               from: fromUser,
//               to,
//               message,
//               createdAt: new Date(),
//               isRead: false
//           });

//           // Optionally save the message to the database:
//           const newMessage = new ChatMessage({from: from, to: to, message: message});
//           await newMessage.save();

//       } catch (error) {
//           console.error('Error sending message:', error);
//       }
//   });

//   socket.on("sendComment", async (data) => {
//       const { content, owner } = data;
//       try {
//           const user = await User.findById(owner);
//           if (!user) {
//               console.error('User not found');
//               return;
//           }

//           io.emit('recivedComment', {
//               content: content,
//               owner: user,
//               createdAt: new Date(),
//           });
//       } catch (error) {
//           console.error('Error sending comment:', error);
//       }
//   });

//   socket.on("deleteNotification", async (notificationId) => {
//       try {
//           // Replace with your actual delete logic
//           // await deleteNotificationById(notificationId); // Example function
//           console.log(`Notification with ID ${notificationId} deleted (simulated)`);
//           io.emit('notificationDeleted', notificationId);
//       } catch (error) {
//           console.error('Error deleting notification:', error);
//       }
//   });

//   socket.on("disconnect", () => {
//       console.log("Client disconnected:", socket.id);
//       delete onlineUsers[socket.id]; // Remove user from online list
//   });
// });


./img/finalimage.png