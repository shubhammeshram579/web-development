
// router.get('/add-to-card' ,isLoggedIn,  async function(req, res, next) {
//   const user = await userModel
//   .findOne({username:req.session.passport.user})
//   .populate("addcard")
//   res.render('addtocard');
// });


// router.post('/add-to-card', isLoggedIn, async function(req, res, next) {
//   const user = await userModel.findOne({username:req.session.passport.user});
//   const addcard = await addcardModel.create({
//     user: user._id,
//     addcards: req.body.addcards,
//     price:req.body.price,
//   });

//   user.addcard.push(addcard._id);
//   await user.save();
//   res.redirect("/add-to-card");
// });




// // // Route to handle quantity increment and decrement
// router.post('/update-quantity/:id', isLoggedIn,async (req, res) => {
//   const { id } = req.params;
//   const { action } = req.body;

//   try {
//     // Find the product by ID
//     const product = await AddtoProduct2.findById(id);

//     if (action === 'increase') {
//       product.quantity += 1;
//     } else if (action === 'decrease' && product.quantity > 1) {
//       product.quantity -= 1;
//     }

//     // Save the updated product
//     await product.save();

//     res.redirect(`/product/${id}`)

//     // // / Check the referrer to redirect accordingly
//     // const referrer = req.get('Referrer');

//     // if (referrer.includes('/product')) {
//     //   // If the referrer URL includes '/product', redirect to the product page
//     //   res.redirect(`/product/${id}`);
//     // } else if (referrer.includes('/add-to-cart')) {
//     //   // If the referrer URL includes '/add-to-cart', redirect to the cart page
//     //   res.redirect(`/add-to-cart/${id}`);
//     // } else {
//     //   // Default redirection to cart if referrer doesn't match
//     //   res.redirect('/cart');
//     // }
//   } catch (err) {
//     console.error(err);
//     res.status(500).send('Error updating product quantity');
//   }
// });



// // Route to update product quantity
// router.post('/update-quantity2/:id', isLoggedIn, async (req, res) => {
//   const { id } = req.params;
//   const { action } = req.body;
//   const user = await userModel.findOne({username:req.session.passport.user});

//   try {
//     // Find the product by ID (modify this based on where your product is stored)
//     let productInCart = await Cart.findOne({ userId: user._id, "products.productId": id });

//     if (!productInCart) {
//       return res.status(404).send('Product not found in cart');
//     }

//     const productIndex = productInCart.products.findIndex(p => p.productId.toString() === id);

//     if (action === 'increase') {
//       productInCart.products[productIndex].quantity += 1;
//     } else if (action === 'decrease' && productInCart.products[productIndex].quantity > 1) {
//       productInCart.products[productIndex].quantity -= 1;
//     }

//     // Save the updated cart
//     await productInCart.save();



//     res.redirect(`/add-to-cart/${id}`);

//     // Redirect back to the product or cart page based on the referrer
//     // Check the referrer to redirect accordingly
//     // const referrer = req.get('Referrer');

//     // if (referrer.includes('/product')) {
//     //   // If the referrer URL includes '/product', redirect to the product page
//     //   res.redirect(`/product/${id}`);
//     // } else if (referrer.includes('/add-to-cart')) {
//     //   // If the referrer URL includes '/add-to-cart', redirect to the cart page
//     //   res.redirect(`/add-to-cart/${id}`);
//     // } else {
//     //   // Default redirection to cart if referrer doesn't match
//     //   res.redirect('/cart');
//     // }
//   } catch (err) {
//     console.error(err);
//     res.status(500).send('Error updating product quantity');
//   }
// });




// // Express route to handle quantity updates
// router.post('/update-quantity/:productId', isLoggedIn, async (req, res) => {
//   const { productId } = req.params;
//   const { action } = req.body; // Expecting { action: 'increase' or 'decrease' }
//   // const user = await userModel.findOne({username:req.session.passport.user});

//   // Find the product in the cart and update its quantity
//   Cart.findOne({ userId: req.session.passport.user._id }, (err, cart) => {
//       if (err) return res.status(500).json({ success: false, error: err.message });

//       const cartItem = cart.products.find(item => item.productId.toString() === productId);
//       if (!cartItem) return res.status(404).json({ success: false, error: 'Product not found in cart' });

//       // Update the quantity based on action
//       if (action === 'increase') {
//           cartItem.quantity += 1;
//       } else if (action === 'decrease' && cartItem.quantity > 1) {
//           cartItem.quantity -= 1;
//       }

//       // Save the cart and return the updated quantity
//       cart.save((err, updatedCart) => {
//           if (err) return res.status(500).json({ success: false, error: err.message });

//           // Optionally, calculate the new total amount if needed
//           const newTotalAmount = updatedCart.products.reduce((total, item) => total + item.quantity * item.productId.pPrice, 0);

//           res.json({
//               success: true,
//               newQuantity: cartItem.quantity,
//               newTotalAmount: newTotalAmount // If you want to update the total amount
//           });
//       });
//   });
// });





// router.get('/add-to-card', isLoggedIn, async function(req, res, next) {
//   const user = await userModel.findOne({username:req.session.passport.user});
//   res.render('addtocard');
// });


// // Route to add a product to the cart
// router.post('/add-to-cart/:productId',isLoggedIn, async (req, res) => {
//   const productId = req.params.productId;
//   const user = await userModel.findOne({username:req.session.passport.user});
//   // const userId = req.session.user._id; // Get the current logged-in user ID
//   const userId = user._id

//   console.log("userId",user._id)
//   try {
//     let cart = await Cart.findOne({ userId });

//     // If the cart does not exist for the current user, create a new one
//     if (!cart) {
//       cart = new Cart({
//         userId,
//         products: [{ productId, quantity: 1 }],
//       });
//     } else {
//       // If the cart exists, check if the product is already in the cart
//       const productIndex = cart.products.findIndex(p => p.productId.toString() === productId);

//       if (productIndex > -1) {
//         // Product exists in the cart, increment the quantity
//         cart.products[productIndex].quantity += 1;
//       } else {
//         // Product does not exist in the cart, add a new one
//         cart.products.push({ productId, quantity: 1 });
//       }
//     }

//     // Save the cart
//     await cart.save();
//     res.redirect(`/add-to-cart`);
//     // res.render('addtocard');
//   } catch (err) {
//     console.error(err);
//     res.status(500).send('Error adding product to cart');
//   }
// });



// router.get("/payment", function(req,res,next) {
//   res.render("payment")

// })



// // Render payment page
// router.get('/payment', async (req, res) => {

//    // const productId = req.params.productId;
//    const user = await userModel.findOne({username:req.session.passport.user});
//    const userId = user._id; // Get the current logged-in user's ID


//    const products = await AddtoProduct2.find(); // Get all products
//     const cart = await Cart.findOne({ userId }).populate('products.productId'); // Get the current user's cart

//     console.log("pyament card" , cart)

//   // const cart = req.session.cart; // Assuming you store the cart in session
//   let totalAmount = 0;

//   if (cart && cart.products.length > 0) {
//       totalAmount = cart.products.reduce((total, cartItem) => {
//           return total + (cartItem.quantity * cartItem.productId.pPrice);
//       }, 0);
//   }

//   res.render('payment', { cart, totalAmount });
// });



// // Process payment
// router.post('/process-payment', (req, res) => {
//   const { paymentMethod } = req.body;

//   // Placeholder for order details and payment status
//   const orderDetails = {
//       orderId: Math.floor(Math.random() * 1000000), // Example order ID
//       status: 'pending', // Order status can be updated based on payment status
//       paymentMethod,
//   };

//   // Simulate different payment methods handling
//   switch (paymentMethod) {
//       case 'netBanking':
//           // Simulate a redirect to a bank gateway (in a real-world scenario, you would integrate with a bank API)
//           orderDetails.status = 'redirecting to bank gateway';
//           res.send(`Redirecting to bank gateway for order ID: ${orderDetails.orderId}`);
//           break;

//       case 'upi':
//           // Simulate initiating a UPI transaction (you'd typically use a UPI API here)
//           orderDetails.status = 'UPI transaction initiated';
//           res.send(`UPI transaction initiated for order ID: ${orderDetails.orderId}`);
//           break;

//       case 'cod':
//           // For cash on delivery, you just save the order and mark it as COD
//           orderDetails.status = 'order placed with COD';
//           res.send(`Order placed with cash on delivery. Order ID: ${orderDetails.orderId}`);
//           break;

//       default:
//           // If no valid payment method is provided, return an error
//           res.status(400).send('Invalid payment method selected');
//           break;
//   }

//   // Save the orderDetails to a database if necessary (skipping for this example)
//   // db.save(orderDetails);
// });



// // Route to display order confirmation page
// router.get('/order/confirmation/:orderId', async (req, res) => {
//   try {
//       const order = await ProductOrders.findById(req.params.orderId).populate('userId');
//       if (!order) {
//           return res.status(404).send('Order not found');
//       }

//       res.render('orderConfirmation', { order });
//   } catch (error) {
//       console.error('Error fetching order:', error);
//       res.status(500).send('Error fetching order details.');
//   }
// });






// // payment router upi payment
// // // // UPI Payment Endpoint
// router.post('/create-upi-payment', async (req, res) => {

//   try {
//       // Get payment details from the request body
//       const { amount, customerEmail, customerPhone } = req.body;

//     const user = await userModel.findOne({username:req.session.passport.user});
//     const userId = user._id; // Get the current logged-in user's ID

//     const products = await AddtoProduct2.find(); // Get all products
//     const cart = await Cart.findOne({ userId }).populate('products.productId'); // Get the current user's cart
//     console.log("card",cart)
//     console.log("products",products)


//      // const cart = req.session.cart; // Assuming you store the cart in session
//   let totalAmount = 0;

//   if (cart && cart.products.length > 0) {
//       totalAmount = cart.products.reduce((total, cartItem) => {
//           return total + (cartItem.quantity * cartItem.productId.pPrice);
//       }, 0);
//   }

//       // Request payload for UPI provider
//       const payload = {
//           amount: totalAmount, // Amount in paise (for example: 100 = ₹1.00)
//           currency: 'INR',
//           customer: {
//               email: user.email,
//               phone: user.phone_number,
//           },
//           method: 'upi',
//           purpose: 'Payment for Order #12345',
//       };

//       // UPI Provider API Endpoint (Example for Razorpay)
//       const upiProviderEndpoint = 'https://api.razorpay.com/v1/payment_links';

//       // Request to create a UPI payment link
//       const response = await axios.post(upiProviderEndpoint, payload, {
//           headers: {
//               'Authorization': `Basic ${Buffer.from(`${process.env.UPI_PROVIDER_API_KEY}:${process.env.UPI_PROVIDER_SECRET}`).toString('base64')}`,
//               'Content-Type': 'application/json'
//           }
//       });

//       // Send the payment link or QR code URL back to the client
//       res.status(200).json({
//           success: true,
//           paymentLink: response.data.short_url,
//           message: 'UPI payment link created successfully'
//       });
//   } catch (error) {
//       console.error('Error creating UPI payment:', error);
//       res.status(500).json({
//           success: false,
//           message: 'Failed to create UPI payment'
//       });
//   }
// });




// router.post('/submitOrder', async (req, res) => {
//   try {
//     const { fullName, email, address, city, postcode, phone, paymentMethod, bankName, accountNumber, upiId } = req.body;

//     // Validation: Check if all required fields are provided
//     if (!fullName || !email || !address || !city || !postcode || !phone || !paymentMethod) {
//       return res.status(400).send('All fields are required.');
//     }

//     // Payment method specific validation
//     if (paymentMethod === 'internet-banking' && (!bankName || !accountNumber)) {
//       return res.status(400).send('Bank name and account number are required for Internet Banking.');
//     }
//     if (paymentMethod === 'upi' && !upiId) {
//       return res.status(400).send('UPI ID is required for UPI payment.');
//     }

//     // Process order (e.g., save to database)
//     // TODO: Implement order processing logic here

//     // Example response
//     res.status(200).send(`Order placed successfully using ${paymentMethod}.`);
//   } catch (error) {
//     console.error(error);
//     res.status(500).send('An error occurred while processing the order.');
//   }
// });




// // product order page
// router.get('/checkout', isLoggedIn, async function(req, res, next) {
//   const user = await userModel.findOne({username:req.session.passport.user});
//   const userId = user._id;
//   const cart = await Cart.findOne({ userId }).populate('products.productId'); // Get the current user's cart
//   res.render('checkout',{ products, cart });
// });

// router.get('/product' ,isLoggedIn,  async function(req, res, next) {
//   const user = await userModel
//   .findOne({username:req.session.passport.user})
//   .populate("Addtoproduct")
//   res.render('product');
// });



// get create post router for posted file store in multer folder 
// router.post('/product', isLoggedIn, async function(req, res, next) {
//   const user = await userModel.findOne({username:req.session.passport.user});
//   const orderp = await addtoproduct.create({
//     user: user._id,
//     productname: req.body,
//     price: String,
//     pimags:String,
//   });

//   user.gOrder.push(orderp._id);
//   await user.save();
//   res.redirect("/catering")
// });


// var altw = "please login in "
// set function for passport protected purpuse
// function isLoggedIn(req, res, next){
//   if (req.isAuthenticated()){
//     return next();
//   }
//   res.redirect("/");
// };


  // Update in the product collection
    // const product = await Products.findById(id);

    // if (!product) {
    //   return res.status(404).send('Product not found');
    // }

    // if (action === 'increase') {
    //   product.quantity += 1;
    // } else if (action === 'decrease' && product.quantity > 1) {
    //   product.quantity -= 1;
    // }

    // Save the updated product
    // await product.save();